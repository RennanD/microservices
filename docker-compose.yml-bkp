version: "3.9"

services:
  database_microservices: 
    image: postgres
    container_name: database_microservices
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=docker
      - POSTGRES_DB=backoffice_db
    volumes:
      - pgdata:/data/postgres

  mongo_microservices:
    image: mongo
    container_name: mongo_microservices
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: docker
      MONGO_INITDB_ROOT_PASSWORD: docker
    volumes:
      - mongo-volume:/data/db

  zookeeper:
    image: 'bitnami/zookeeper:3'
    container_name: zookeeper_microservises
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-net

  kafka:
    image: 'bitnami/kafka:2'
    container_name: kafka_microservises
    ports:
      - '9092:9092'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - app-net

  backoffice_app:
    build: ./backoffice
    container_name: backoffice_app
    ports:
      - 3333:3333
    volumes:
      - .:/usr/backoffice_app
    links:
      - database_microservices
    depends_on:
      - database_microservices
  
  company_app:
    build: ./company-app
    container_name: company_app
    ports:
      - 4000:4000
    volumes:
      - .:/usr/company_app
    links:
      - mongo_microservices
    depends_on:
      - mongo_microservices
      - kafka
    networks:
      - app-net

networks:
  app-net:
    driver: bridge


volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  pgdata:
    driver: local
  mongo-volume: 
    driver: local

